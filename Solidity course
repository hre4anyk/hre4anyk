### Links to learning course
https://github.com/smartcontractkit/full-blockchain-solidity-course-py
https://www.youtube.com/watch?v=M576WGiDBdQ&t=14335s

### Working environment
Visual studio code - text editor >> write code and execute in terminal by using WSL (Windows subsystem for Windows), тобто ти кодиш на віндовсі але операційно на UBUNTU, менше багів/помилок.
Ganache - local blockchain ENV для тестових операцій. Можна епку відкривати, найпроф - напряму в терміналі, прописуєш ganache
Brownie - smart contract dev platform buillt on python
Remix - for start only (text editor+compilet+deployer) 

### General

1) Кожний смарт починається із : 
 // SPDX-License-Identifier: MIT
 pragma solidity >=0.6.6 <0.9.0; >>> must be the same as compiler version

1) Якщо в терміналі VS cтворити directory and after нап " code . " то ти відкриєш новий VS і зліва в панелі в тебе буде суто цей фолдер

2) Variable specification : variable_type var_name
 

2.1) Complex variable/new objects type - i.e Nazar 10 (nazar = var 1, 10 - var2)
   struct complex_var_name {
     uint256 var_name1;
     string var_name2;
   }
   complex_var_name public person1 =  complex_var_name ({var_name1 : 10, var_name2 : "Nazar"}) >>> will create Nazar 10
  *Якщо змінна складна і мають задаватися спец.значення то ставляться "{}" після назви комплекс змінної і після простої змінної всередині складної ставляться ":" щоб призначити їй значення >>> complex_var_name ({var_name1 : 10, var_name2 : "Nazar"}) 

3) Кожен рядок закінч із ";"

4) Контракт починається із
 contract contract_name {
 ....}

5) Функція 
 позначається function function_name(). Після використання function() також ставиться {}
 Типи Функцій: 
  payable (там де рух коштів) і які змінюють стан блокчейну, 
  view  ті що витягують дані із існууючого блокчейна і є загальнодоступні, non-payable
  pure ті що витягують дані із існууючого блокчейна і є загальнодоступні, non-payable, used for math

16) Visibility&Aceess of variables/functions
public >> can be called by anybody
private >>> most restrictive
external >> can not be called by this contract but only by external contract
internal >>> can only be called inside the contract

6) Array aka list:
 позначається як array[] array_name
 Добавити в арей: 1) array_name.push(var_name) or  2) var_name.push(array_name)
 Dynamic array array[] VS Fixed array of 5 items will be array[5]
 
7) Msg.sender той хто викликає функцію
8) Msg.value - скільки перекидується грошей
 
9) Mapping - Привязування двох змінних одна до одної (суму трансферу і адресу гаменця) 
 mapping (address >= uint256) public mapping_name

10) constructor() - функція в яку ти закладаєш усе, що має статися одночасно із деплойментом контракту, наприклад право власності
 constructor () public {
 owner = msg.sender
 
11) Chainlink = data oracles дає змогу запиляти в контракт інфу із зовн світу за допомогою interface які можна знайти в npm chainlink/repository github і перенести за допомогою import
 
12) msg.sender.transfer(address(this).balance); - той хто викликає функцію перекидує з адресу цього this контракту весь баланс
 
13) modifier - функція яка допомагає зазначити необхідну умову яка потім буде реюзатися для кожної функцію
  а) Створи умову
 modifier modifier_name {
   require(msg.sender == owner);
   -; // "-" вказає що після умови виконуй всі наст рядки контракту
 б) Потім в кожній функції вставляй modifier_name і це буде виконуватися

14) Loops - таке ж як у пайтон, циркуляція
for (var_type var_name) index =0, var_name < var_name.length, var_name++
Для якої верібл запустити >> Start >>>> Доки циркулювати >>>  Який наступний елемент після початкового, (++ означає наступний)

15) return() функція яка витягує дані
function function_name() public view returns(var_type)
return return_var_name

16) Збереження змінних які виеористовуються у функціях
  memory >>> stored only during the execution of the function, after execution - delete this variable
  storage >>> forever
  function addPerson(string memory _name, uint256 _favoriteNumber) public{ >>> memory means variable addPerson will be deleted after execution, if var_type inside function is string it must be memory storage

17) створити папку - mkdir folder_name, 
перейти в directory - cd folder_name

############### Brownie #######################################################################################################

! starts new project
brownie init

! There are 2 Contracts sections on LHS of VS, Contracts itself is where u write your contracts, built>contracts where transformed version by brownie exists, NEVER yours own

! Auto compiler that read the contract and put contract.json in built>contracts section on the LHS of VS
brownie compile

! to Deploy a contact, u need a script, go to script section and create new file
To run a deployment
brownie run scripts/file_name.sol

! Brownie initially uses local ganache blockchains but u need only one for TESTS only so use package and specidy formula
from brownie import accounts
def deploy_simple_storage():
  account = accounts[0]

! Account mngmt in brownie
 1) in the command line in terminal write:
 brownie accounts new acc_name
 2) it will ask u to insert your private key for this account
 3) To check account list
 brownie accounts list
 4) Delete acc
  brownie accounts delete acc_name
 5) Use acc in smart contract
  account = accounts.load("acc_name")
 6) Alt 1 The drawback of this method is that u will always be in need of typing your password but it's secure
 
 ! Environmental variables
 Create files 
  .env >>> put private key
  .brownie-config.yaml >>> put dotenv: .env ### it will tell brownie to open always .env file when script is run
  To access in smart contact:
  account = accounts.add(os.getenv("PRIVATE KEY")
  Alt 2:  The drawback of this method is that u can share your .env file and someone will steal our funds 

  
  Alternative: put ur private key in one place and reuse it. For this reason you use your brownie config file - .brownie-config.yaml
  1) Open .brownie-config.yaml and Write 
  wallets:
  from_key: ${PRIVATE_KEY}
  2) inside smart contract:
  from brownie import accounts, config
  accounts.add(config["wallets"]["from_key"]) 
  ### secure and easy manageble private key
  
  ! To import any contract into brownie
  from brownie import Contract_name
  
  ! To deploy contract >> brownie automatically recognize whether you do transact or call
  Contract_name.deploy({"from": account}) >>> any transaction ALWAYS have "from" : address In BROWNIE
 
 ! Testing of your smart contracts is done by using python methods due to highe richness of language, Go to pytest if need
  Create file test_contractname.py under test menu on the LHS of VisualCode
  Імпорт необіхдних бібліотек (accounts, contracts_name)
  Створи фунцію перевірки:
   def test_name():
    ....
  ТЕст складається із 3ьох частин:
   Arrange >>> з якого акаунта перевірка account = accounts[0], весь початковий сетап може бути якийсь наявний контракт уже
   Act >>> run a contract, retrieve intital value, create var you expected to retrieve
   Assert >>> ствои умовву aka starting value == expected
  Run command
   brownie test
  
  ! Testing different part functions:
  brownie test -k function_name >>>for test of 1 specific function
  brownie test -pdb >>>> check different parts at a time
  brownie test -s >>>  will print the line which parts passed, which did not
  
  ! DEployment to mainnet in Brownie
   Brownie has prepackage of network list , check > brownie networks list
   All under dev section are temporary and are deleted after our scripts completes
   Connect to Infura through project id by specifying it inside .env by: >>>Brownie understands greatly infura
    export WEB3_INFURA_PROJECT_ID='574246430f8446238e30bf7ff36c58d1` >>> project id digits are taken from infura
   Run command in terminal:
   brownie run scripts/name.py -- network kovan >>> will deploy to kovan network







